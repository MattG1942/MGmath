// define available <T> values
# Substitutes
# <T> Num

// base Types: UInt8 SInt8 UInt16 SInt16 UInt32 SInt32 UInt64 SInt64 Float32 Float64 Boolean String
// Default groups: Floats, Ints, UInts, SInts, Num, AllBase
// Substitutes are space seperated.
// Do not leave White space on the end of any line starting with '#'

# Filename "ArrayArithmaticKL.kl"

// Substitutions and Filename are optional; Default Substitution is <T> Num, Default Filename is ParsedKL.KL
// coments using the // notation will be ignored up to this point, infact any line not starting '#' will be ignored.
// within the functions section they will be parsed as a kl comment.
// currently only 1 substitute is allowed per function.
// However by generating a new template from the resulting code to run the Parser a second time multiple substitutes may be acheived.

# Functions
#
// Array Arithmatic Operators
// +, -, *, / or % a single value with an array to return an array of the same size as the origional array.
// Each value in the array is concidered individually when applying the operation.
// eg. [1,2,3] + 5 = [6,7,8] or 12 / [4,3,2] = [3,4,6]
// All Numerical Base types suported

// a[] + b | b + a[]

# <T>
// <T> a[] + <T> b | <T> b + <T> a[]
operator multiPlus<<<index>>>(<T> a[], <T> b, io <T> c[]) {
  c[index] = a[index] + b;
}
function <T>[] +(<T> a[], <T> b) {
  <T> c[];
  c.resize(a.size);
  // for (Integer i = 0; i < a.size; i++) {
  //   c[i] = a[i] + b;
  // }
  multiPlus<<<a.size>>>(a,b,c);
  return c;
}
function <T>[] +(<T> b, <T> a[]) {
  <T> c[];
  c.resize(a.size);
  multiPlus<<<a.size>>>(a,b,c);
  return c;
}

#
// a[] - b | b - a[]

# <T>
// <T> a[] - <T> b
operator multiAMinusB<<<index>>>(<T> a[], <T> b, io <T> c[]) {
  c[index] = a[index] - b;
}
function <T>[] -(<T> a[], <T> b) {
  <T> c[];
  c.resize(a.size);
  multiAMinusB<<<a.size>>>(a,b,c);
  return c;
}
// <T> b - <T> a[]
operator multiBMinusA<<<index>>>(<T> a[], <T> b, io <T> c[]) {
  c[index] = b - a[index];
}
function <T>[] -(<T> b, <T> a[]) {
  <T> c[];
  c.resize(a.size);
  multiBMinusA<<<a.size>>>(a,b,c);
  return c;
}

#
// a[] * b | b * a[]

# <T>
// <T> a[] * <T> b | <T> b * <T> a[]
operator multiMultiply<<<index>>>(<T> a[], <T> b, io <T> c[]) {
  c[index] = a[index] * b;
}
function <T>[] *(<T> a[], <T> b) {
  <T> c[];
  c.resize(a.size);
  multiMultiply<<<a.size>>>(a,b,c);
  return c;
}
function <T>[] *(<T> b, <T> a[]) {
  <T> c[];
  c.resize(a.size);
  multiMultiply<<<a.size>>>(a,b,c);
  return c;
}

#
// a[] / b | b / a[]

# <T>
// <T> a[] / <T> b
operator multiADivideB<<<index>>>(<T> a[], <T> b, io <T> c[]) {
  c[index] = a[index] / b;
}
function <T>[] /(<T> a[], <T> b) {
  <T> c[];
  c.resize(a.size);
  multiADivideB<<<a.size>>>(a,b,c);
  return c;
}
// <T> b / <T> a[]
operator multiBDivideA<<<index>>>(<T> a[], <T> b, io <T> c[]) {
  c[index] = b / a[index];
}
function <T>[] /(<T> b, <T> a[]) {
  <T> c[];
  c.resize(a.size);
  multiBDivideA<<<a.size>>>(a,b,c);
  return c;
}

#
// a[] % b | b % a[]

# <T>
// <T> a[] % <T> b
operator multiAModB<<<index>>>(<T> a[], <T> b, io <T> c[]) {
  c[index] = a[index] % b;
}
function <T>[] %(<T> a[], <T> b) {
  <T> c[];
  c.resize(a.size);
  multiAModB<<<a.size>>>(a,b,c);
  return c;
}
// <T> b % <T> a[]
operator multiBModA<<<index>>>(<T> a[], <T> b, io <T> c[]) {
  c[index] = b % a[index];
}
function <T>[] %(<T> b, <T> a[]) {
  <T> c[];
  c.resize(a.size);
  multiBModA<<<a.size>>>(a,b,c);
  return c;
}

