// define available <T> values
# Substitutes
# <TF> Floats
# <TI> Ints

// base Types: UInt8 SInt8 UInt16 SInt16 UInt32 SInt32 UInt64 SInt64 Float32 Float64 Boolean String
// Default groups: Floats, Ints, UInts, SInts, Num, AllBase
// Substitutes are space seperated.
// Do not leave White space on the end of any line starting with '#'

# Filename "LinearInterpolateKL.kl"

// Substitutions and Filename are optional; Default Substitution is <T> Num, Default Filename is ParsedKL.KL
// coments using the // notation will be ignored up to this point, infact any line not starting '#' will be ignored.
// within the functions section they will be parsed as a kl comment.
// currently only 1 substitute is allowed per function.
// However by generating a new template from the resulting code to run the Parser a second time multiple substitutes may be acheived.

# Functions
#
// Linear interpolation. 
// Linear interpolate and Linearly interpolated arrays

// eg. variable = linearInterpolate(first, second, blend)
// where first and second are the limits. blend is the amount between the limits of the returned value. blend = 0 will return == first, blend = 1 will return == second. blend < 0 or blend > 1 will return a value beyond the limits.
// All integer types use Float32 blend
// Float types use matching Float type for blend

// eg. array = linearlyInterpolatedArray(size, start, end)
// where size is an Integer and start and end are the limits

// All Numerical Base types Suported
// Future developement:
// Vector types to be added

//Linear interpolate: 

# <TF>
function <TF> linearInterpolate(in <TF> first, in <TF> second, in <TF> blend) {
  return (1 - blend) * first + blend * second;
}

# <TI>
function <TI> linearInterpolate(in <TI> first, in <TI> second, in Float32 blend) {
  return (1 - blend) * first + blend * second;
}

#
// build Linearly interpolated arrays:

# <TF>
operator linearlyInterpolatedArrayInner<TF><<<index>>>(in Integer size, in <TF> start, in <TF> end, io <TF> returnArray[]) {
  returnArray[index] = linearInterpolate(start, end, <TF>(index) / (<TF>(size) - 1));
}
function <TF>[] linearlyInterpolatedArray(in Integer size, in <TF> start, in <TF> end) {
  <TF> returnArray[];
  returnArray.resize(size);
  linearlyInterpolatedArrayInner<TF><<<size>>>(size, start, end, returnArray);
  return returnArray;
}

# <TI>
operator linearlyInterpolatedArrayInner<TI><<<index>>>(in Integer size, in <TI> start, in <TI> end, io <TI> returnArray[]) {
  returnArray[index] = linearInterpolate(start, end, Float32(index) / (Float32(size) - 1));
}
function <TI>[] linearlyInterpolatedArray(in Integer size, in <TI> start, in <TI> end) {
  <TI> returnArray[];
  returnArray.resize(size);
  linearlyInterpolatedArrayInner<TI><<<size>>>(size, start, end, returnArray);
  return returnArray;
}

